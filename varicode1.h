/*   I found this table on the web.
     I needed to remove the backslash C line continuation character as it caused a skip in the 
     data even though it was in a comment. Symptom was all lower case letters printed incorrectly. 
     Changing the null character to all zero's in order to send the preamble, will only get two zero's sent per character
     The original authors comments follow,  K1URC

     
The following table defines the PKS31 varicode.  There are 128 entries,
corresponding to ASCII characters 0-127 with two bytes for each entry.  The bits
for the varicode are to be shifted out MSB-first for both bytes, with the first byte
in the table being the first one to be sent.

The leading zeroes in the first byte should be ignored (i.e. shift past them to the
first 1).  More than one zero in sequence signifies the end of the character (i.e.
two zeroes are the intercharacter sequence, so at least two zeroes should always be
sent before the next character is sent.

For modulation, a 0 represents a phase reversal while a 1 represents a steady-state
carrier.

This file is constructed with information from the article "PSK31 Fundamentals"
by Peter Martinez, G3PLX by Clint Turner, KA7OEI
*/
const unsigned char varicode[256] =	{
 0,0,       // preamble
// 0b10101010,
// 0b11000000, // 0 NUL
0b10110110,
0b11000000, // 1 SOH
0b10111011,
0b01000000, // 2 STX
0b11011101,
0b11000000, // 3 ETX
0b10111010,
0b11000000, // 4 EOT
0b11010111,
0b11000000, // 5 ENQ
0b10111011,
0b11000000, // 6 ACK
0b10111111,
0b01000000, // 7 BEL
0b10111111,
0b11000000, // 8 BS
0b11101111,
0b00000000, // 9 HT
0b11101000,
0b00000000, // 10 LF
0b11011011,
0b11000000, // 11 VT
0b10110111,
0b01000000, // 12 FF
0b11111000,
0b00000000, // 13 CR
0b11011101,
0b01000000, // 14 SO
0b11101010,
0b11000000, // 15 SI
0b10111101,
0b11000000, // 16 DLE
0b10111101,
0b01000000, // 17 DC1
0b11101011,
0b01000000, // 18 DC2
0b11101011,
0b11000000, // 19 DC3
0b11010110,
0b11000000, // 20 DC4
0b11011010,
0b11000000, // 21 NAK
0b11011011,
0b01000000, // 22 SYN
0b11010101,
0b11000000, // 23 ETB
0b11011110,
0b11000000, // 24 CAN
0b11011111,
0b01000000, // 25 EM
0b11101101,
0b11000000, // 26 SUB
0b11010101,
0b01000000, // 27 ESC
0b11010111,
0b01000000, // 28 FS
0b11101110,
0b11000000, // 29 GS
0b10111110,
0b11000000, // 30 RS
0b11011111,
0b11000000, // 31 US
0b10000000,
0b00000000, // 32 SP
0b11111111,
0b10000000, // 33 !
0b10101111,
0b10000000, // 34 "
0b11111010,
0b10000000, // 35 #
0b11101101,
0b10000000, // 36 $
0b10110101,
0b01000000, // 37 %
0b10101110,
0b11000000, // 38 &
0b10111111,
0b10000000, // 39 '
0b11111011,
0b00000000, // 40 (
0b11110111,
0b00000000, // 41 )
0b10110111,
0b10000000, // 42 *
0b11101111,
0b10000000, // 43 +
0b11101010,
0b00000000, // 44 ,
0b11010100,
0b00000000, // 45 -
0b10101110,
0b00000000, // 46 .
0b11010111,
0b10000000, // 47 /
0b10110111,
0b00000000, // 48 0
0b10111101,
0b00000000, // 49 1
0b11101101,
0b00000000, // 50 2
0b11111111,
0b00000000, // 51 3
0b10111011,
0b10000000, // 52 4
0b10101101,
0b10000000, // 53 5
0b10110101,
0b10000000, // 54 6
0b11010110,
0b10000000, // 55 7
0b11010101,
0b10000000, // 56 8
0b11011011,
0b10000000, // 57 9
0b11110101,
0b00000000, // 58 :
0b11011110,
0b10000000, // 59 ;
0b11110110,
0b10000000, // 60 <
0b10101010,
0b00000000, // 61 =
0b11101011,
0b10000000, // 62 >
0b10101011,
0b11000000, // 63 ?
0b10101111,
0b01000000, // 64 @
0b11111010,
0b00000000, // 65 A
0b11101011,
0b00000000, // 66 B
0b10101101,
0b00000000, // 67 C
0b10110101,
0b00000000, // 68 D
0b11101110,
0b00000000, // 69 E
0b11011011,
0b00000000, // 70 F
0b11111101,
0b00000000, // 71 G
0b10101010,
0b10000000, // 72 H
0b11111110,
0b00000000, // 73 I
0b11111110,
0b10000000, // 74 J
0b10111110,
0b10000000, // 75 K
0b11010111,
0b00000000, // 76 L
0b10111011,
0b00000000, // 77 M
0b11011101,
0b00000000, // 78 N
0b10101011,
0b00000000, // 79 O
0b11010101,
0b00000000, // 80 P
0b11101110,
0b10000000, // 81 Q
0b10101111,
0b00000000, // 82 R
0b11011110,
0b00000000, // 83 S
0b11011010,
0b00000000, // 84 T
0b10101011,
0b10000000, // 85 U
0b11011010,
0b10000000, // 86 V
0b10101110,
0b10000000, // 87 W
0b10111010,
0b10000000, // 88 X
0b10111101,
0b10000000, // 89 Y
0b10101011,
0b01000000, // 90 Z
0b11111011,
0b10000000, // 91 [
0b11110111,
0b10000000, // 92 backslash
0b11111101,
0b10000000, // 93 ]
0b10101111,
0b11000000, // 94 ^
0b10110110,
0b10000000, // 95 _ (underline)
0b10110111,
0b11000000, // 96 `
0b10110000,
0b00000000, // 97 a
0b10111110,
0b00000000, // 98 b
0b10111100,
0b00000000, // 99 c
0b10110100,
0b00000000, // 100 d
0b11000000,
0b00000000, // 101 e
0b11110100,
0b00000000, // 102 f
0b10110110,
0b00000000, // 103 g
0b10101100,
0b00000000, // 104 h
0b11010000,
0b00000000, // 105 i
0b11110101,
0b10000000, // 106 j
0b10111111,
0b00000000, // 107 k
0b11011000,
0b00000000, // 108 l
0b11101100,
0b00000000, // 109 m
0b11110000,
0b00000000, // 110 n
0b11100000,
0b00000000, // 111 o
0b11111100,
0b00000000, // 112 p
0b11011111,
0b10000000, // 113 q
0b10101000,
0b00000000, // 114 r
0b10111000,
0b00000000, // 115 s
0b10100000,
0b00000000, // 116 t
0b11011100,
0b00000000, // 117 u
0b11110110,
0b00000000, // 118 v
0b11010110,
0b00000000, // 119 w
0b11011111,
0b00000000, // 120 x
0b10111010,
0b00000000, // 121 y
0b11101010,
0b10000000, // 122 z
0b10101101,
0b11000000, // 123 {
0b11011101,
0b10000000, // 124 |
0b10101101,
0b01000000, // 125 }
0b10110101,
0b11000000, // 126 ~
0b11101101,
0b01000000, // 127 (del)
};


// the mfsk varicode table
// Due to the way the auto transmit code is written using the most sig bit to denote if we will key 
//  the transmitter or not, I only included half of the table.  The other half is not reachable with
//  the current implementation.
  const unsigned int varicode2[] = {

        0b11101011100,       // <NUL>
        0b11101100000,       // <SOH>
        0b11101101000,       // <STX>
        0b11101101100,       // <ETX>
        0b11101110000,       // <EOT>
        0b11101110100,       // <ENQ>
        0b11101111000,       // <ACK>
        0b11101111100,       // <BEL>
        0b10101000,       // <BS>
        0b11110000000,       // <TAB>
       0b11110100000,       // <LF>
       0b11110101000,       // <VT>
       0b11110101100,       // <FF>
       0b10101100,       // <CR>
       0b11110110000,       // <SO>
       0b11110110100,       // <SI>
       0b11110111000,       // <DLE>
       0b11110111100,       // <DC1>
       0b11111000000,       // <DC2>
       0b11111010000,       // <DC3>
       0b11111010100,       // <DC4>
       0b11111011000,       // <NAK>
       0b11111011100,       // <SYN>
       0b11111100000,       // <ETB>
       0b11111101000,       // <CAN>
       0b11111101100,       // <EM>
       0b11111110000,       // <SUB>
       0b11111110100,       // <ESC>
       0b11111111000,       // <FS>
       0b11111111100,       // <GS>
       0b100000000000,       // <RS>
       0b101000000000,       // <US>
       0b100,       //  <SPACE>
       0b111000000,       // !
       0b111111100,       // "
       0b1011011000,       // #
       0b1010101000,       // $
       0b1010100000,       // %
       0b1000000000,       // &
       0b110111100,       // '
       0b111110100,       // (
       0b111110000,       // )
       0b1010110100,       // *
       0b111100000,       // +
       0b10100000,       // ,
       0b111011000,       // -
       0b111010100,       // .
       0b111101000,       // /
       0b11100000,       // 0
       0b11110000,       // 1
       0b101000000,       // 2
       0b101010100,       // 3
       0b101110100,       // 4
       0b101100000,       // 5
       0b101101100,       // 6
       0b110100000,       // 7
       0b110000000,       // 8
       0b110101100,       // 9
       0b111101100,       // :
       0b111111000,       // ;
       0b1011000000,       // <
       0b111011100,       // =
       0b1010111100,       // >
       0b111010000,       // ?
       0b1010000000,       // @
       0b10111100,       // A
       0b100000000,       // B
       0b11010100,       // C
       0b11011100,       // D
       0b10111000,       // E
       0b11111000,       // F
       0b101010000,       // G
       0b101011000,       // H
       0b11000000,       // I
       0b110110100,       // J
       0b101111100,       // K
       0b11110100,       // L
       0b11101000,       // M
       0b11111100,       // N
       0b11010000,       // O
       0b11101100,       // P
       0b110110000,       // Q
       0b11011000,       // R
       0b10110100,       // S
       0b10110000,       // T
       0b101011100,       // U
       0b110101000,       // V
       0b101101000,       // W
       0b101110000,       // X
       0b101111000,       // Y
       0b110111000,       // Z
       0b1011101000,       // [
       0b1011010000,       // backslash 
       0b1011101100,       // ]
       0b1011010100,       // ^
       0b1010110000,       // _
       0b1010101100,       // `
       0b10100,       // a
       0b1100000,       // b
       0b111000,       // c
      0b110100,       // d
      0b1000,       // e
      0b1010000,       // f
      0b1011000,       // g
      0b110000,       // h
      0b11000,       // i
      0b10000000,       // j
      0b1110000,       // k
      0b101100,       // l
      0b1000000,       // m
      0b11100,       // n
      0b10000,       // o
      0b1010100,       // p
      0b1111000,       // q
      0b100000,       // r
      0b101000,       // s
      0b1100,       // t
      0b111100,       // u
      0b1101100,       // v
      0b1101000,       // w
      0b1110100,       // x
      0b1011100,       // y
      0b1111100,       // z
      0b1011011100,       // {
      0b1010111000,       // |
      0b1011100000,       // }
      0b1011110000,       // ~
      0b101010000000       // <DEL>
  };

/*
      1280b101010100000,       // ?
      1290b101010101000,       // 
      1300b101010101100,       // 
      1310b101010110000,       // 
      1320b101010110100,       // 
      1330b101010111000,       // 
      1340b101010111100,       // 
      1350b101011000000,       // 
      1360b101011010000,       // 
      1370b101011010100,       // 
      1380b101011011000,       // 
      1390b101011011100,       // 
      1400b101011100000,       // 
      1410b101011101000,       // 
      1420b101011101100,       // 
      1430b101011110000,       // 
      1440b101011110100,       // 
      1450b101011111000,       // 
      1460b101011111100,       // 
      1470b101100000000,       // 
      1480b101101000000,       // 
      1490b101101010000,       // 
      1500b101101010100,       // 
      1510b101101011000,       // 
      1520b101101011100,       // 
      1530b101101100000,       // 
      1540b101101101000,       // 
      1550b101101101100,       // 
      1560b101101110000,       // 
      1570b101101110100,       // 
      1580b101101111000,       // 
      1590b101101111100,       // 
      1600b1011110100,       //
      1610b1011111000,       // 
      1620b1011111100,       // 
      1630b1100000000,       // 
      1640b1101000000,       // 
      1650b1101010000,       // 
      1660b1101010100,       // 
      1670b1101011000,       // 
      1680b1101011100,       // 
      1690b1101100000,       // 
      1700b1101101000,       // 
      1710b1101101100,       // 
      1720b1101110000,       // 
      1730b1101110100,       // 
      1740b1101111000,       // 
      1750b1101111100,       // 
      1760b1110000000,       // 
      1770b1110100000,       // 
      1780b1110101000,       // 
      1790b1110101100,       // 
      1800b1110110000,       // 
      1810b1110110100,       // 
      1820b1110111000,       // 
      1830b1110111100,       // 
      1840b1111000000,       // 
      1850b1111010000,       // 
      1860b1111010100,       // 
      1870b1111011000,       // 
      1880b1111011100,       // 
      1890b1111100000,       // 
      1900b1111101000,       // 
      1910b1111101100,       // 
      1920b1111110000,       // 
      1930b1111110100,       // 
      1940b1111111000,       // 
      1950b1111111100,       // 
      1960b10000000000,       // 
      1970b10100000000,       // 
      1980b10101000000,       // 
      1990b10101010000,       // 
      2000b10101010100,       // 
      2010b10101011000,       // 
      2020b10101011100,       // 
      2030b10101100000,       // 
      2040b10101101000,       // 
      2050b10101101100,       // 
      2060b10101110000,       // 
      2070b10101110100,       // 
      2080b10101111000,       // 
      2090b10101111100,       // 
      2100b10110000000,       // 
      2110b10110100000,       // 
      2120b10110101000,       // 
      2130b10110101100,       // 
      2140b10110110000,       // 
      2150b10110110100,       // 
      2160b10110111000,       // 
      2170b10110111100,       // 
      2180b10111000000,       // 
      2190b10111010000,       // 
      2200b10111010100,       // 
      2210b10111011000,       // 
      2220b10111011100,       // 
      2230b10111100000,       // 
      2240b10111101000,       // 
      2250b10111101100,       // 
      2260b10111110000,       // 
      2270b10111110100,       // 
      2280b10111111000,       // 
      2290b10111111100,       // 
      2300b11000000000,       // 
      2310b11010000000,       // 
      2320b11010100000,       // 
      2330b11010101000,       // 
      2340b11010101100,       // 
      2350b11010110000,       // 
      2360b11010110100,       // 
      2370b11010111000,       // 
      2380b11010111100,       // 
      2390b11011000000,       // 
      2400b11011010000,       // 
      2410b11011010100,       // 
      2420b11011011000,       // 
      2430b11011011100,       // 
      2440b11011100000,       // 
      2450b11011101000,       // 
      2460b11011101100,       // 
      2470b11011110000,       // 
      2480b11011110100,       // 
      2490b11011111000,       // 
      2500b11011111100,       // 
      2510b11100000000,       // 
      2520b11101000000,       // 
      2530b11101010000,       // 
      2540b11101010100,       // 
      2550b11101011000,       // 
*/
